library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity garazSrc is
    Port ( clk : in  STD_LOGIC;
		   reset : in  STD_LOGIC;
           p : in  STD_LOGIC;
           o : in  STD_LOGIC;
           ce1 : in  STD_LOGIC;
           semafor : out  STD_LOGIC;
           stav : out  STD_LOGIC_VECTOR (2 downto 0));
end garazSrc;

architecture Behavioral of garazSrc is

 signal state, next_state : STD_LOGIC_VECTOR (2 downto 0);
 constant s0: STD_LOGIC_VECTOR (2 downto 0) := "000";
 constant s1: STD_LOGIC_VECTOR (2 downto 0) := "001";
 constant s2: STD_LOGIC_VECTOR (2 downto 0) := "010";
 constant s3: STD_LOGIC_VECTOR (2 downto 0) := "011";
 constant s4: STD_LOGIC_VECTOR (2 downto 0) := "100";
 constant s5: STD_LOGIC_VECTOR (2 downto 0) := "101";

begin

   SYNC_PROC: process (clk)
   begin
      if (clk'event and clk = '1') then
         if (reset = '1') then
            state <= s0;
         elsif (ce1 = '1') then
            state <= next_state;
         end if;        
      end if;
   end process;
	
   OUTPUT_DECODE: process (state)
   begin
      if state = s5 then
         semafor <= '1';
      else
         semafor <= '0';
      end if;
   end process;
	
   NEXT_STATE_DECODE: process (state, p, o)
   begin
      next_state <= state;
		
      case (state) is
         when s0 =>
            if (p = '1' and o = '0') then
               next_state <= s1;
				else 
					next_state <= state; -- Nebo s0
            end if;
         when s1 =>
            if (p = '1' and o = '0') then
               next_state <= s2;
				elsif (p = '0' and o = '1') then
					next_state <= s0;
				else 
					next_state <= state; -- Nebo s1
            end if;
         when s2 =>
            if (p = '1' and o = '0') then
               next_state <= s3;
				elsif (p = '0' and o = '1') then
					next_state <= s1;
				else 
					next_state <= state;
            end if;
         when s3 =>
            if (p = '1' and o = '0') then
               next_state <= s4;
				elsif (p = '0' and o = '1') then
					next_state <= s2;
				else 
					next_state <= state;
            end if;
         when s4 =>
            if (p = '1' and o = '0') then
               next_state <= s5;
				elsif (p = '0' and o = '1') then
					next_state <= s3;
				else 
					next_state <= state;
            end if;
         when s5 =>
            if (p = '0' and o = '1') then
					next_state <= s4;
				else 
					next_state <= state;
            end if;
         when others => null;
      end case;      
		
		stav <= state;
   end process;

end Behavioral;

